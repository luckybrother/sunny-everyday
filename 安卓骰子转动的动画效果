import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import android.app.Activity;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Point;
import android.util.DisplayMetrics;
import android.view.View;

public class DiceView extends View implements Runnable{
	public static int ROTATE_NUM = 20;
	private static int running_dice[] = {R.drawable.dice_f1,R.drawable.dice_f2,R.drawable.dice_f3,R.drawable.dice_f4};
	//停止后的骰子的6个点的id
	private static int final_dice[] = {R.drawable.dice1,R.drawable.dice2,R.drawable.dice3,
			R.drawable.dice4,R.drawable.dice5,R.drawable.dice6};
	
	
	private Random random;
	private int screenWidth;
	private int screenHeight;
	//骰子转动的次数
	private int count = 0;
	//转动中的骰子的图片id
	
	//转动中的骰子的图片集合
	private List<Bitmap> running_dices_list;
	//停止的骰子的6个点的的图片的集合
	private List<Bitmap> final_dices_list;
	private Point point;
	
	//当前要绘制的bitmap
	private Bitmap current_bitmap;
	//最终的点数-1
	private int number;
	
	private Paint paint;
	
	
	public DiceView(Activity activity,Point point) {
		super(activity);
		this.point = point;
		init(activity);
		
		
	}

	private void init(Activity activity) {
		paint = new Paint();
		random = new Random();
		getScreenSize(activity);//获得屏幕的分辨率
		running_dices_list = new ArrayList<Bitmap>();
		final_dices_list = new ArrayList<Bitmap>();
		initBitmap();
	}
	/*
	 * 初始化资源图片
	 * */
	private void initBitmap() {
		Resources res = getResources();
		for(int i=0;i<running_dice.length;i++){
			running_dices_list.add(BitmapFactory.decodeResource(res, running_dice[i]));
		}
		
		for(int i=0;i<final_dice.length;i++){
			final_dices_list.add(BitmapFactory.decodeResource(res, final_dice[i]));
		}
	}
	
	
	
	
	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		if(count++ > 5){
			
			point = new Point(random.nextInt(screenWidth/2)+screenWidth/8,random.nextInt(screenHeight/2)+screenHeight/8);
			//当骰子转动5次之后，改变骰子当前的位置
		}
		if(count > 19){
			number = random.nextInt(final_dice.length);
			current_bitmap = final_dices_list.get(number);
		}else{
			number = random.nextInt(running_dice.length);
			current_bitmap = running_dices_list.get(number);
		}
		System.out.println("aaaaaaaaaaa"+point.x+">>>>>"+point.y);
		canvas.drawBitmap(current_bitmap, point.x, point.y,paint);
	}
	
	void getScreenSize(Activity activity){
		DisplayMetrics dm = new DisplayMetrics();
		
		activity.getWindowManager().getDefaultDisplay().getMetrics(dm);

		screenWidth = dm.widthPixels;//屏幕宽度

		screenHeight = dm.heightPixels;//屏幕高度
	}
	//开启一个线程绘制view
	public void startThread(){
		new Thread(this).start();;
	}

	@Override
	public void run() {
		for(int i=0;i<ROTATE_NUM;i++){
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			} finally{
				postInvalidate();
			}
		}
		
	}
	
}
